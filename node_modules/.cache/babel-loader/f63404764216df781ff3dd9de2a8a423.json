{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/yatinsatija/Desktop/RVCEx/src/pages/my-items/my-items.component.jsx\";\nimport React, { Component } from 'react';\nimport { firestore } from '../../firebase/firebase.utils';\nimport { Grid, Typography, Button, Dialog, DialogTitle, Card, CardActionArea, CardMedia, CardContent, DialogContent } from '@material-ui/core';\n\nclass Myitems extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleMailer = (userEmail, item) => {\n      const {\n        ownerEmail,\n        itemName,\n        imageUrl,\n        id\n      } = item; // console.log(userEmail,ownerEmail,itemName);\n\n      fetch('http://localhost:8080/mail/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userEmail,\n          ownerEmail,\n          itemName,\n          imageUrl\n        })\n      }).then(async res => res.text()).then(async ({\n        message,\n        error\n      }) => {\n        if (error === true) {\n          console.log(message);\n          alert(message);\n          return;\n        } else {\n          alert(`Successfully sent mail to ${userEmail}`);\n          var itemRef = await firestore.collection(\"items\").doc(id);\n          itemRef.update({\n            isAssigned: true,\n            assignedTo: userEmail\n          }).then(() => {\n            console.log(\"Document successfully updated\");\n            alert(\"Document successfully updated\");\n            window.location.reload();\n          }).catch(err => alert(err.message));\n        }\n      });\n    };\n\n    if (!localStorage.getItem(\"currentUserEmail\")) {\n      alert(\"Please login to view this page\");\n      this.props.history.push(\"/signin\");\n    }\n\n    this.state = {\n      ownerItems: [],\n      seeInteresredUsers: false\n    };\n  }\n\n  async componentDidMount() {\n    const itemsSnapShot = await firestore.collection(\"items\").get();\n    const docsArray = itemsSnapShot.docs;\n    const allItems = docsArray.map(doc => ({ ...doc.data(),\n      id: doc.id\n    }));\n    const ownerItems = allItems.filter(docData => docData.ownerEmail === localStorage.getItem(\"currentUserEmail\"));\n    this.setState({\n      ownerItems\n    });\n  }\n\n  render() {\n    console.log(this.state.ownerItems);\n\n    if (this.state.ownerItems) {\n      return /*#__PURE__*/_jsxDEV(Grid, {\n        style: {\n          marginTop: \"10%\"\n        },\n        container: true,\n        spacing: 1,\n        children: this.state.ownerItems.map((item, i) => /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            style: {\n              height: \"400px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(CardActionArea, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                style: {\n                  paddingTop: \"10px\"\n                },\n                src: item.imageUrl,\n                alt: \"\",\n                style: {\n                  height: \"200px\",\n                  width: \"170px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                    children: \"Item Name:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 93,\n                    columnNumber: 57\n                  }, this), \" \", item.itemName]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  children: [/*#__PURE__*/_jsxDEV(\"u\", {\n                    children: \"Desription\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 57\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 74\n                  }, this), item.description]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n                style: {},\n                onClose: () => this.setState({\n                  seeInteresredUsers: false\n                }),\n                open: this.state.seeInteresredUsers && this.state.itemName === item.itemName,\n                children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n                  id: \"simple-dialog-title\",\n                  children: \"Interested Users\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n                  children: this.state.seeInteresredUsers && this.state.itemName === item.itemName && (item.isAssigned === false ? item.interestedUsers.length > 0 ? item.interestedUsers.map(userEmail => /*#__PURE__*/_jsxDEV(Button, {\n                    onClick: () => this.handleMailer(userEmail, item),\n                    variant: \"contained\",\n                    children: [\"Assign to \", userEmail]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 111,\n                    columnNumber: 73\n                  }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n                    children: \"No one interested yet\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 65\n                  }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n                    children: [\"Already assigned to \", item.assignedTo]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 57\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                style: {\n                  backgroundColor: \"#56b5e8\"\n                },\n                type: \"button\",\n                onClick: () => this.setState({\n                  seeInteresredUsers: true,\n                  itemName: item.itemName\n                }),\n                children: \"See Interested Users\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"No items found under your name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default Myitems;","map":{"version":3,"sources":["/Users/yatinsatija/Desktop/RVCEx/src/pages/my-items/my-items.component.jsx"],"names":["React","Component","firestore","Grid","Typography","Button","Dialog","DialogTitle","Card","CardActionArea","CardMedia","CardContent","DialogContent","Myitems","constructor","props","handleMailer","userEmail","item","ownerEmail","itemName","imageUrl","id","fetch","method","headers","body","JSON","stringify","then","res","text","message","error","console","log","alert","itemRef","collection","doc","update","isAssigned","assignedTo","window","location","reload","catch","err","localStorage","getItem","history","push","state","ownerItems","seeInteresredUsers","componentDidMount","itemsSnapShot","get","docsArray","docs","allItems","map","data","filter","docData","setState","render","marginTop","i","height","paddingTop","width","description","interestedUsers","length","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { firestore } from '../../firebase/firebase.utils';\n\nimport {\n    Grid,\n    Typography,\n    Button,\n    Dialog,\n    DialogTitle,\n    Card,\n    CardActionArea,\n    CardMedia,\n    CardContent,\n    DialogContent\n} from '@material-ui/core';\n\nclass Myitems extends Component {\n    constructor(props){\n        super(props);\n        if (!localStorage.getItem(\"currentUserEmail\")) {\n            alert(\"Please login to view this page\")\n            this.props.history.push(\"/signin\")\n        }\n        this.state = {\n            ownerItems: [],\n            seeInteresredUsers: false\n        }\n    }\n    \n\n\n\n    async componentDidMount() {\n        \n        const itemsSnapShot = await firestore.collection(\"items\").get();\n        const docsArray = itemsSnapShot.docs;\n        const allItems = docsArray.map(doc => ({...doc.data(),id:doc.id}));\n        const ownerItems = allItems.filter(docData => docData.ownerEmail === localStorage.getItem(\"currentUserEmail\"))\n        this.setState({ ownerItems });\n    }\n\n    handleMailer = (userEmail,item) => {\n        const {ownerEmail,itemName,imageUrl,id}=item;\n        // console.log(userEmail,ownerEmail,itemName);\n        \n        fetch('http://localhost:8080/mail/', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ userEmail,ownerEmail,itemName,imageUrl})\n        })\n        .then(async(res) => res.text())\n        .then(async ({message,error}) => {\n            if(error===true){\n                console.log(message);\n                alert(message);\n                return;\n            } else {\n                alert(`Successfully sent mail to ${userEmail}`);\n\n                \n                    var itemRef = await firestore.collection(\"items\").doc(id);\n                    itemRef.update({\n                        isAssigned:true,\n                        assignedTo:userEmail\n                    })\n                    .then(() => {\n                        console.log(\"Document successfully updated\");\n                        alert(\"Document successfully updated\");\n                        window.location.reload();\n                    })\n                    .catch(err => alert(err.message))\n                \n            }\n        })\n\n    }\n\n    \n\n\n    render() {\n        console.log(this.state.ownerItems);\n        if (this.state.ownerItems) {\n            return (\n                <Grid style={{ marginTop: \"10%\" }} container spacing={1}>\n                    {\n                        this.state.ownerItems.map((item,i) => (\n                            <Grid item xs={3} key={i} >\n                                <Card style={{ height: \"400px\" }}>\n                                    <CardActionArea>\n                                        <img style={{paddingTop:\"10px\"}} src={item.imageUrl} alt='' style={{ height: \"200px\", width: \"170px\" }} />\n                                        <CardContent>\n                                            <Typography><u>Item Name:</u> {item.itemName}</Typography>\n                                            <Typography><u>Desription</u><br />{item.description}</Typography>\n                                        </CardContent>\n                                        <Dialog\n                                            style={{}}\n                                            onClose={() => this.setState({ seeInteresredUsers: false })}\n                                            open={this.state.seeInteresredUsers && this.state.itemName === item.itemName}>\n                                            <DialogTitle id=\"simple-dialog-title\">Interested Users</DialogTitle>\n                                            <DialogContent>\n                                                {\n                                                    this.state.seeInteresredUsers && this.state.itemName === item.itemName &&\n\n                                                    ( item.isAssigned===false \n                                                        ?\n                                                            (\n                                                                item.interestedUsers.length > 0 \n                                                                ?\n                                                                item.interestedUsers.map(userEmail => \n                                                                        <Button onClick={() => this.handleMailer(userEmail,item)} variant=\"contained\">Assign to {userEmail}</Button>       \n                                                                )\n                                                                :\n                                                                <Typography>No one interested yet</Typography>\n                                                            )\n                                                        :\n\n                                                        <Typography>Already assigned to {item.assignedTo}</Typography>\n                                                    )\n\n                                                }\n                                            </DialogContent>\n                                        </Dialog>\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            style={{ backgroundColor: \"#56b5e8\" }}\n                                            type=\"button\"\n                                            onClick={() => this.setState({\n                                                seeInteresredUsers: true,\n                                                itemName: item.itemName\n                                            })}\n                                        >\n                                            See Interested Users\n                                        \n                                </Button>\n                                    </CardActionArea>\n                                </Card>\n\n                            </Grid>\n                        ))\n                    }\n\n                </Grid>\n            )\n        } else {\n            return (\n                <h2>No items found under your name</h2>\n            )\n        }\n\n\n    }\n}\n\nexport default Myitems\n"]},"metadata":{},"sourceType":"module"}